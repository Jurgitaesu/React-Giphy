{"version":3,"sources":["components/Input.js","components/Grid.js","components/Modal.js","components/Loader.js","App.js","index.js"],"names":["Input","keywordRef","handleSearch","className","ref","type","placeholder","onClick","Grid","gifs","openModal","map","gif","src","images","original","url","alt","id","Modal","imageSrc","setImageSrc","Loader","App","useRef","useState","keyword","setKeyword","setGifs","error","setError","isLoading","setIsLoading","offset","setOffset","useEffect","a","process","fetch","response","json","data","fetchedGifs","length","fetchGifs","handleScroll","document","documentElement","scrollTop","clientHeight","scrollHeight","setTimeout","window","addEventListener","removeEventListener","current","value","selectedImage","find","x","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.21568092.chunk.js","sourcesContent":["function Input({keywordRef, handleSearch}) {\r\n    return (\r\n        <div className=\"inputHolder\">\r\n            <input ref={keywordRef} type=\"text\" placeholder=\"Enter keyword\"/>\r\n            <div className=\"btn\" onClick={handleSearch}>Search</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Input;","\r\nfunction Grid({gifs, openModal}) {\r\n    return (\r\n        <div className=\"grid-container\">\r\n            {gifs &&\r\n            gifs.map(gif =>\r\n                <img src={gif.images.original.url} alt=\"gif\" key={gif.id} className=\"grid-img\"\r\n                     onClick={() => openModal(gif.id)}/>\r\n            )\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Grid;","import {FaRegWindowClose} from 'react-icons/fa'\r\n\r\nfunction Modal({imageSrc, setImageSrc}) {\r\n    return (\r\n        <div className=\"modal\">\r\n            <div className=\"modal-content\">\r\n                <FaRegWindowClose onClick={() => setImageSrc('')} className=\"close\"/>\r\n                <img src={imageSrc} alt=\"gif\"/>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Modal;","const Loader = () => {\r\n    return (\r\n        <div className=\"loader\"></div>\r\n    );\r\n};\r\n\r\nexport default Loader;","import {useRef, useState, useEffect} from 'react';\nimport Input from './components/Input';\nimport Grid from './components/Grid';\nimport Modal from './components/Modal';\nimport Loader from './components/Loader';\n\nfunction App() {\n    const keywordRef = useRef(null);\n    const [keyword, setKeyword] = useState('');\n    const [gifs, setGifs] = useState([]);\n    const [error, setError] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n    const [imageSrc, setImageSrc] = useState('');\n    const [offset, setOffset] = useState(0);\n\n    useEffect(() => {\n        if (isLoading) {\n            const fetchGifs = async () => {\n                try {\n                    const API_KEY = process.env.REACT_APP_API_KEY;\n                    const response = await fetch(`https://api.giphy.com/v1/gifs/search?api_key=${API_KEY}&q=${keyword}&limit=12&offset=${offset}`);\n                    const data = await response.json();\n                    const fetchedGifs = data.data;\n                    if (fetchedGifs.length === 0) {\n                        return setError('No more gifs to show, try another keyword');\n                    }\n                    setError('');\n                    setGifs([...gifs, ...fetchedGifs]);\n                    setOffset((offset) => offset + 13);\n                } catch (e) {\n                    setError(e);\n                }\n            };\n            fetchGifs();\n        }\n        setIsLoading(false);\n\n    }, [isLoading]);\n\n    const handleSearch = () => {\n        setGifs([]);\n        setOffset(() => 0);\n        if (keywordRef.current.value === '') {\n            return setError('Please type a keyword');\n        }\n        if (typeof keywordRef.current.value === 'string' || 'number') {\n            setKeyword(keywordRef.current.value);\n            setIsLoading(true);\n            return keywordRef.current.value = '';\n        } else {\n            setError('Keyword should contain only characters or numbers');\n        }\n    }\n    const handleScroll = () => {\n        const scrollTop = document.documentElement.scrollTop;\n        const clientHeight = document.documentElement.clientHeight;\n        const scrollHeight = document.documentElement.scrollHeight;\n        if (scrollTop + clientHeight > scrollHeight - 5) {\n            setTimeout(function () {\n                setIsLoading(true);\n            }, 500);\n        }\n    }\n\n    useEffect(() => {\n        window.addEventListener('scroll', handleScroll);\n        return () => window.removeEventListener('scroll', handleScroll);\n    }, []);\n\n    const openModal = (id) => {\n        const selectedImage = gifs.find(x => x.id === id);\n        setImageSrc(selectedImage.images.original.url);\n    }\n\n    return (\n        <div className=\"container\">\n            <Input keywordRef={keywordRef} handleSearch={handleSearch}/>\n            {isLoading ? <Loader/> : null}\n            {!!error && <div className=\"error\">{error}</div>}\n            <Grid gifs={gifs} openModal={openModal}/>\n            {!!imageSrc &&\n            <Modal imageSrc={imageSrc} setImageSrc={setImageSrc}/>\n            }\n        </div>\n    );\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);"],"sourceRoot":""}